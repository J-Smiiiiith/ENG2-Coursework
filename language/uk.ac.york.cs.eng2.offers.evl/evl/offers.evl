// Write your EVL validation rules here.
//
// To run them, right-click on the Sirius diagram background and select "Validate diagram".

//Check product names are unique
context Product {

  constraint nameIsUnique {
  
    check: Product.all.select(p | p.name == self.name).size() == 1
    
    message: "Product name '" + self.name + "' is not unique."
  }
  
  critique nameStartsWithCapitalLetter {
  
    check: self.name == self.name.ftuc()
    
    message: "Product names should start with an upper case letter."
    
    fix {
    
      title: "Rename '" + self.name + "' to: " + self.name.ftuc()
      
      do {
        self.name = self.name.ftuc();
      }
    }
  }
}

//Check percentages are between 0 and 100
context OfferPriceReduction {
	
	constraint percentageBetween0And100 {
	
		check: self.percentageReduction > 0 and self.percentageReduction <= 100
		
		message: "Price reduction offer: '" + self.name + "' has percentage reduction: " 
		+ self.percentageReduction + ". This value must b between 0 and 100."
	}
}

context OfferRule {

  //Check one rule triggered by no other rules
  constraint onlyOneStartRuleExists {
  
  	guard: Trigger.all.select(t | t.target == self).isEmpty()

    check: OfferRule.all.select(r | Trigger.all.select(t | t.target == r).isEmpty()).size() == 1

    message: "'" + self.name + "'" + "is not targetted by any trigger. There only be 1 OfferRule " +
    "that is not targeted by any Trigger."
  }
  
  //Check rules with always triggers only have always triggers
  constraint onlyAlwaysTrigger {
  
  	guard: self.triggers.exists(t | t.type == TriggerType#ALWAYS)
  	
  	check: self.triggers.select(t | t.type == TriggerType#IF_NOT_MATCH).size() == 0 and 
  		   self.triggers.select(t | t.type == TriggerType#IF_MATCH).size() == 0
  	 
  	message: "'" + self.name + "' has triggers: " + self.triggers + ". Rules with an ALWAYS triggers cannot " + 
  	"have IF_NOT_MATCH or IF_MATCH triggers"
  	
  }
  
  //Check only one of each type of trigger per rule
  constraint noDuplicateTriggerTypes {
  
  	guard: self.triggers.size() > 1
  	
  	check {
  		var matchCount = self.triggers.select(t | t.type == TriggerType#IF_MATCH).size();
		var notMatchCount = self.triggers.select(t | t.type == TriggerType#IF_NOT_MATCH).size();
		var alwaysCount = self.triggers.select(t | t.type == TriggerType#ALWAYS).size();
		
		alwaysCount.println();
		
		return matchCount < 2 and notMatchCount < 2 and alwaysCount < 2;
  	}
  	
  	message:  "'" + self.name + "' has triggers: " + self.triggers + ". There must be at most 1 of each " +
  	"trigger type per rule."
  }
}
