[% var className = rule.name.replaceAll("[^a-zA-Z0-9]", ""); %]

package uk.ac.york.eng2.products.resources.offers.generated.offer_rule;

import uk.ac.york.eng2.products.resources.offers.src.OfferHandler;
import java.util.Map;

/**
 * Auto-generated offer handler for rule: [%=rule.name%]
 */
public class [%=className%] implements OfferHandler {

    @Override
    public String getRuleName() {
        return "[%=rule.name%]";
    }

    @Override
    public boolean isOfferValid(Map<Long, Integer> order) {
        [%for (c in rule.conditions) { %]
        if (!check[%=c.name.replaceAll("[^a-zA-Z0-9]", "")%](order)) return false;
        [% } %]
        return true;
    }

    @Override
    public float applyOffer(Map<Long, Integer> order) {
        float total = 0;
        [%for (o in rule.offers) { %]
        total += apply[%=o.name.replaceAll("[^a-zA-Z0-9]", "")%](order);
        [% } %]
        return total;
    }

    // --- Condition Check Methods ---
    [%for (c in rule.conditions) { 
       var methodName = c.name.replaceAll("[^a-zA-Z0-9]", "");
    %]
    private boolean check[%=methodName%](Map<Long, Integer> order) {
        [%=out.startPreserve("//", "//", "check_" + methodName, true)%]
        // TODO: Implement condition logic for [%=c.name%]
        return true;
        [%=out.stopPreserve()%]
    }
    [% } %]

    // --- Offer Apply Methods ---
    [%for (o in rule.offers) { 
       var methodName = o.name.replaceAll("[^a-zA-Z0-9]", "");
    %]
    private float apply[%=methodName%](Map<Long, Integer> order) {
        [%=out.startPreserve("//", "//", "apply_" + methodName, true)%]
        // TODO: Implement offer logic for [%=o.name%]
        return 0;
        [%=out.stopPreserve()%]
    }
    [% } %]
}